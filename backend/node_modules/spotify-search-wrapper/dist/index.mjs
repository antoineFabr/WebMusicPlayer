var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/utils/index.ts
import { load } from "cheerio";
var getSpotifyToken = () => __async(void 0, null, function* () {
  try {
    const url = "https://open.spotify.com";
    const response = yield fetch(url, {
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"
      }
    });
    const data = yield response.text();
    const $ = load(data);
    const spotifySession = $("#session").html();
    if (!spotifySession) {
      return null;
    }
    const { accessToken } = JSON.parse(spotifySession);
    return accessToken;
  } catch (error) {
    throw new Error("Error scraping Spotify: " + error);
  }
});
var fetchFromSpotify = (url, params = null) => __async(void 0, null, function* () {
  const spotifyApiUrl = "https://api.spotify.com/v1";
  if (!params) {
    throw new Error("No parameters provided");
  }
  const tempToken = yield getSpotifyToken();
  const response = yield fetch(`${spotifyApiUrl}/${url}/${params}`, {
    headers: {
      Authorization: `Bearer ${tempToken}`
    }
  });
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}; message: ${response.statusText}`);
  }
  return response.json();
});

// src/search/index.ts
var searchTrack = (query) => __async(void 0, null, function* () {
  if (!query) {
    throw new Error("No query provided");
  }
  const data = yield fetchFromSpotify("search", `?q=${query}&type=track&limit=5`);
  return data.tracks.items;
});
var searchPlaylist = (query) => __async(void 0, null, function* () {
  if (!query) {
    throw new Error("No query provided");
  }
  const data = yield fetchFromSpotify("search", `?q=${query}&type=playlist&limit=5`);
  return data.playlists.items;
});
var getTrackInfo = (id) => __async(void 0, null, function* () {
  if (!id) {
    throw new Error("No ID provided");
  }
  const data = yield fetchFromSpotify("tracks", id);
  return data;
});
var getPlaylist = (id) => __async(void 0, null, function* () {
  if (!id) {
    throw new Error("No ID provided");
  }
  const data = yield fetchFromSpotify("playlists", id);
  return data;
});

// src/tools/index.ts
var validateID = (id) => {
  if (!id)
    false;
  if (typeof id !== "string")
    return false;
  const base62Regex = /^[a-zA-Z0-9]+$/;
  if (!base62Regex.test(id))
    return false;
  return true;
};
export {
  getPlaylist,
  getTrackInfo,
  searchPlaylist,
  searchTrack,
  validateID
};
//# sourceMappingURL=index.mjs.map